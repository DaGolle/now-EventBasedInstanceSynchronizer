<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_snc_ebis.ConfigurationUtil</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Helper class to manage Configuration [x_snc_ebis.configuration] records</description>
        <name>ConfigurationUtil</name>
        <script><![CDATA[class ConfigurationUtil {
	constructor(grConfiguration) {
		//this._gr = grConfiguration;
		// caching attributes below for performance
		this._number = grConfiguration.getValue('number');
		this._tableName = grConfiguration.getValue('table');
		this._tableLabel = new GlideRecord(this._tableName).getClassDisplayValue();
		this._tableFullName = `${this._tableName} [${this._tableLabel}]`;
		this._direction = grConfiguration.getValue('direction');
		this._actionConfig = {
			'insert': grConfiguration.getValue('action_insert'),
			'update': grConfiguration.getValue('action_update'),
			'delete': grConfiguration.getValue('action_delete')
		};
	}

	getEventSuffix = action => [this._direction, action].join('.'); // linter parsing error for '=' can be safely ignored
	getEventName = action => [gs.getCurrentScopeName(), this.getEventSuffix(action)].join('.');

	// table info
	getTableName     = () => this._tableName;
	getTableLabel    = () => this._tableLabel;
	getFullTableName = () => this._tableFullName;

	getActions(value) {
		const actionConfig = this._actionConfig;
		if (value === undefined) {
			return Object.keys(actionConfig);
		} else {
			return Object.keys(actionConfig)
				.filter(actionName => (actionConfig[actionName] == value));
		}
	}

	// Event Registry shortcuts
	getEventRegistryFiredBy = () => `Business Rule generated by EBIS configuration record ${this._number}`;
	getEventRegistryDescription = action => `Triggered by ${action} in table ${this.getFullTableName()}`;

	// Business Rule shortcuts
	getBusinessRuleName = action => `${this._number} ${action} events`;
}
]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>david.van.damme</sys_created_by>
        <sys_created_on>2024-04-10 12:41:46</sys_created_on>
        <sys_id>fee909244721c210cf10815a516d4392</sys_id>
        <sys_mod_count>17</sys_mod_count>
        <sys_name>ConfigurationUtil</sys_name>
        <sys_package display_value="Event Based Instance Synchronizer" source="x_snc_ebis">beaac464472d8210cf10815a516d43d9</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Event Based Instance Synchronizer">beaac464472d8210cf10815a516d43d9</sys_scope>
        <sys_update_name>sys_script_include_fee909244721c210cf10815a516d4392</sys_update_name>
        <sys_updated_by>david.van.damme</sys_updated_by>
        <sys_updated_on>2024-04-12 07:56:16</sys_updated_on>
    </sys_script_include>
</record_update>
