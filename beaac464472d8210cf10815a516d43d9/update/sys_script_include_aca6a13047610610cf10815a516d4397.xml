<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_snc_ebis.BusinessRuleUtil</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Helper functions to manage Business Rules needed for listening to record actions and generating events (outbound EBIS)</description>
        <name>BusinessRuleUtil</name>
        <script><![CDATA[class BusinessRuleUtil {
	constructor() {
		// prepare GlideQuery on Business Rule table
		this._gqBusinessRule = new global.GlideQuery('sys_script');
		// retrieve the default value for a Business Rule script
		this._scriptTemplate = new global.GlideQuery('sys_dictionary')
			.where('name', 'sys_script')
			.where('element', 'script')
			.selectOne('default_value')
			.orElse({'default_value': null})
			.default_value;
	}

	insertOrUpdateEventQueueTrigger(configuration, action) {
		const businessRuleName = configuration.getBusinessRuleName(action);
		const tableName = configuration.getTableName();
		const sysID = this._gqBusinessRule
			.where('name', businessRuleName)
			.where('collection', tableName)
			.selectOne()
			.orElse({'sys_id': null})
			.sys_id;

		const businessRuleConfig = {
			'sys_id': sysID,
			'name': businessRuleName,
			'collection': tableName,
			'active': configuration.isActive(),
			'advanced': true,
			'when': (action == 'delete') ? 'after' : 'async_always', // async will not work for deletes, since 'current' is gone
			'filter_condition': configuration.getActionCondition(action),
			'script': this._getEventQueueScript(configuration.getEventName(action), action, options)
		};
		businessRuleConfig['action_' + action] = true;
		
		this._gqBusinessRule.insertOrUpdate(businessRuleConfig);
	}

	delete(configuration, action) {
		this._gqBusinessRule
			.where('name', configuration.getBusinessRuleName(action))
			.where('collection', configuration.getTableName())
			.deleteMultiple();
	}

	_getPayloadScript(configurationNumber, action, options) {
		const preserveSysID = options.preserve_sys_id || false;
		const payloadPrefix = `FieldMapUtil.getByConfigurationNumber(${configurationNumber})`;

		switch(action) {
			case 'insert':
				return `${payloadPrefix}.getOutboundMessage(current,${preserveSysID})`;
			case 'update':
				return `${payloadPrefix}.getOutboundMessage(current)`;
			case 'delete':
				return `${payloadPrefix}.getDeleteMessage(current)`;
		}
	}

	_getEventQueueScript(eventName, action, options) {
		const payloadScript = this._getPayloadScript(action, options);
		const code = `gs.eventQueue('${eventName}',null,current.getTableName(),${payloadScript});`;
		return this._scriptTemplate.replace(/\/\/ Add your code here/g, code);
	}
}
]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>david.van.damme</sys_created_by>
        <sys_created_on>2024-04-11 09:28:45</sys_created_on>
        <sys_id>aca6a13047610610cf10815a516d4397</sys_id>
        <sys_mod_count>24</sys_mod_count>
        <sys_name>BusinessRuleUtil</sys_name>
        <sys_package display_value="Event Based Instance Synchronizer" source="x_snc_ebis">beaac464472d8210cf10815a516d43d9</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Event Based Instance Synchronizer">beaac464472d8210cf10815a516d43d9</sys_scope>
        <sys_update_name>sys_script_include_aca6a13047610610cf10815a516d4397</sys_update_name>
        <sys_updated_by>david.van.damme</sys_updated_by>
        <sys_updated_on>2024-05-22 15:02:41</sys_updated_on>
    </sys_script_include>
</record_update>
